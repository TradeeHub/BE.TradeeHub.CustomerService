schema {
  query: Query
  mutation: Mutation
}

type AddressDbObject {
  address: String
  city: String
  postcode: String
  fullAddress: String
}

type CommentDbObject {
  comment: String
  uploadUrls: [String!]!
}

type CustomerDbObject {
  properties: [PropertyDbObject]
  id: ID!
  customerReferenceNumber: String!
  title: String
  name: String
  surname: String
  fullName: String!
  alias: String
  status: String!
  emails: [EmailDbObject!]
  phoneNumbers: [PhoneNumberDbObject!]
  tags: [String!]
  createdAt: DateTime!
  createdBy: UUID!
  modifiedAt: DateTime
  modifiedBy: UUID
  referredByCustomer: ID
  referredByOther: String
  referralFeeFixed: Decimal
  referralFeePercentage: Decimal
  customerRating: Decimal
  comments: [CommentDbObject!]
}

"A connection to a list of items."
type CustomersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CustomersEdge!]
  "A flattened list of the nodes."
  nodes: [CustomerDbObject!]
}

"An edge in a connection."
type CustomersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CustomerDbObject!
}

type EmailDbObject {
  emailType: String!
  email: String!
}

type Mutation {
  generateFakeCustomers(quantity: Int!): String!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type PhoneNumberDbObject {
  phoneNumberType: String!
  phoneNumber: String!
}

type PropertyDbObject {
  "The customers associated with this property."
  customers: [CustomerDbObject]
  id: ID!
  property: AddressDbObject!
  billing: AddressDbObject
  location: String
  quotes: [ID!]
  jobs: [ID!]
  createdAt: DateTime!
  createdBy: UUID!
  modifiedAt: DateTime
  modifiedBy: UUID
}

type Query {
  customers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [CustomerDbObjectSortInput!] where: CustomerDbObjectFilterInput): CustomersConnection
  customerById(id: ID!): CustomerDbObject
}

input CommentDbObjectFilterInput {
  and: [CommentDbObjectFilterInput!]
  or: [CommentDbObjectFilterInput!]
  comment: StringOperationFilterInput
  uploadUrls: ListStringOperationFilterInput
}

input CustomerDbObjectFilterInput {
  and: [CustomerDbObjectFilterInput!]
  or: [CustomerDbObjectFilterInput!]
  id: ObjectIdOperationFilterInput
  customerReferenceNumber: StringOperationFilterInput
  title: StringOperationFilterInput
  name: StringOperationFilterInput
  surname: StringOperationFilterInput
  fullName: StringOperationFilterInput
  alias: StringOperationFilterInput
  status: StringOperationFilterInput
  emails: ListFilterInputTypeOfEmailDbObjectFilterInput
  phoneNumbers: ListFilterInputTypeOfPhoneNumberDbObjectFilterInput
  properties: ListObjectIdOperationFilterInput
  tags: ListStringOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  createdBy: UuidOperationFilterInput
  modifiedAt: DateTimeOperationFilterInput
  modifiedBy: UuidOperationFilterInput
  referredByCustomer: ObjectIdOperationFilterInput
  referredByOther: StringOperationFilterInput
  referralFeeFixed: DecimalOperationFilterInput
  referralFeePercentage: DecimalOperationFilterInput
  customerRating: DecimalOperationFilterInput
  comments: ListFilterInputTypeOfCommentDbObjectFilterInput
}

input CustomerDbObjectSortInput {
  id: SortEnumType
  customerReferenceNumber: SortEnumType
  title: SortEnumType
  name: SortEnumType
  surname: SortEnumType
  fullName: SortEnumType
  alias: SortEnumType
  status: SortEnumType
  createdAt: SortEnumType
  createdBy: SortEnumType
  modifiedAt: SortEnumType
  modifiedBy: SortEnumType
  referredByCustomer: SortEnumType
  referredByOther: SortEnumType
  referralFeeFixed: SortEnumType
  referralFeePercentage: SortEnumType
  customerRating: SortEnumType
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input EmailDbObjectFilterInput {
  and: [EmailDbObjectFilterInput!]
  or: [EmailDbObjectFilterInput!]
  emailType: StringOperationFilterInput
  email: StringOperationFilterInput
}

input ListFilterInputTypeOfCommentDbObjectFilterInput {
  all: CommentDbObjectFilterInput
  none: CommentDbObjectFilterInput
  some: CommentDbObjectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEmailDbObjectFilterInput {
  all: EmailDbObjectFilterInput
  none: EmailDbObjectFilterInput
  some: EmailDbObjectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPhoneNumberDbObjectFilterInput {
  all: PhoneNumberDbObjectFilterInput
  none: PhoneNumberDbObjectFilterInput
  some: PhoneNumberDbObjectFilterInput
  any: Boolean
}

input ListObjectIdOperationFilterInput {
  all: ObjectIdOperationFilterInput
  none: ObjectIdOperationFilterInput
  some: ObjectIdOperationFilterInput
  any: Boolean
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input ObjectIdOperationFilterInput {
  eq: ObjectId
  neq: ObjectId
  in: [ObjectId]
  nin: [ObjectId]
  gt: ObjectId
  ngt: ObjectId
  gte: ObjectId
  ngte: ObjectId
  lt: ObjectId
  nlt: ObjectId
  lte: ObjectId
  nlte: ObjectId
}

input PhoneNumberDbObjectFilterInput {
  and: [PhoneNumberDbObjectFilterInput!]
  or: [PhoneNumberDbObjectFilterInput!]
  phoneNumberType: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum SortEnumType {
  ASC
  DESC
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

"The ObjectId scalar type represents a 12 byte ObjectId, represented as UTF-8 character sequences."
scalar ObjectId @specifiedBy(url: "https:\/\/docs.mongodb.com\/manual\/reference\/bson-types\/#objectid")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")